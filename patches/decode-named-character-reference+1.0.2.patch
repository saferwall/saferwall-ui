diff --git a/node_modules/decode-named-character-reference/index.dom.js b/node_modules/decode-named-character-reference/index.dom.js
index 5d0abe2..ee3efd5 100644
--- a/node_modules/decode-named-character-reference/index.dom.js
+++ b/node_modules/decode-named-character-reference/index.dom.js
@@ -1,33 +1,18 @@
-/// <reference lib="dom" />
+import {characterEntities} from 'character-entities'
 
-/* eslint-env browser */
-
-const element = document.createElement('i')
+const own = {}.hasOwnProperty
 
 /**
+ * Decode a single character reference (without the `&` or `;`).
+ * You probably only need this when you’re building parsers yourself that follow
+ * different rules compared to HTML.
+ * This is optimized to be tiny in browsers.
+ *
  * @param {string} value
+ *   `notin` (named), `#123` (deci), `#x123` (hexa).
  * @returns {string|false}
+ *   Decoded reference.
  */
 export function decodeNamedCharacterReference(value) {
-  const characterReference = '&' + value + ';'
-  element.innerHTML = characterReference
-  const char = element.textContent
-
-  // Some named character references do not require the closing semicolon
-  // (`&not`, for instance), which leads to situations where parsing the assumed
-  // named reference of `&notit;` will result in the string `¬it;`.
-  // When we encounter a trailing semicolon after parsing, and the character
-  // reference to decode was not a semicolon (`&semi;`), we can assume that the
-  // matching was not complete.
-  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
-  // yield `null`.
-  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {
-    return false
-  }
-
-  // If the decoded string is equal to the input, the character reference was
-  // not valid.
-  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
-  // yield `null`.
-  return char === characterReference ? false : char
+  return own.call(characterEntities, value) ? characterEntities[value] : false
 }
